{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Fs5TR4iibJE6"
   },
   "source": [
    "# Using PYNQ library for PMOD_ADC\n",
    "\n",
    "This just uses the built in Pmod_ADC library to read the value on the PMOD_AD2 peripheral."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "id": "xjDlpBuobJE-"
   },
   "outputs": [],
   "source": [
    "from pynq.overlays.base import BaseOverlay\n",
    "from pynq.lib import Pmod_ADC\n",
    "base = BaseOverlay(\"base.bit\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "id": "4UMzOxCBbJE_"
   },
   "outputs": [],
   "source": [
    "adc = Pmod_ADC(base.PMODB)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "hPqHRI81bJE_"
   },
   "source": [
    "Read the raw value and the 12 bit values from channel 1.\n",
    "\n",
    "Refer to docs: https://pynq.readthedocs.io/en/v2.1/pynq_package/pynq.lib/pynq.lib.pmod.html#pynq-lib-pmod"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "id": "ZUPuwo0bbJFA"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1895]"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adc.read_raw(ch1=1, ch2=0, ch3=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "id": "f4KtefkVbJFA"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.9448]"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adc.read(ch1=1, ch2=0, ch3=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Type in the interface ID used (PMODA or PMODB): PMODB\n",
      "Type in the frequency/Hz of the waveform: 100\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from time import sleep\n",
    "from pynq.overlays.base import BaseOverlay\n",
    "from pynq.lib import Pmod_ADC\n",
    "\n",
    "base = BaseOverlay(\"base.bit\")\n",
    "\n",
    "\n",
    "if_id = input(\"Type in the interface ID used (PMODA or PMODB): \")\n",
    "if if_id.upper()=='PMODA':\n",
    "    adc = Pmod_ADC(base.PMODA)\n",
    "else:\n",
    "    adc = Pmod_ADC(base.PMODB)\n",
    "\n",
    "freq = int(input(\"Type in the frequency/Hz of the waveform: \"))\n",
    "period = 1/freq\n",
    "log_interval_us = 0\n",
    "\n",
    "# Assume Channel 0 is connected to the waveform generator\n",
    "adc.start_log(1,0,0,log_interval_us)\n",
    "sleep(3*period)\n",
    "log = adc.get_log()\n",
    "\n",
    "# Draw the figure\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "plt.plot(range(len(log)), log, 'ro')\n",
    "plt.title('PMOD ADC Waveform')\n",
    "plt.axis([0, len(log), min(log), max(log)])\n",
    "plt.show()\n",
    "\n",
    "adc.reset()\n",
    "del adc,base"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "HcIGxRCDbJFA"
   },
   "source": [
    "# Using MicroblazeLibrary\n",
    "\n",
    "Here we're going down a level and using the microblaze library to write I2C commands directly to the PMOD_AD2 peripheral\n",
    "\n",
    "Use the documentation on the PMOD_AD2 to answer lab questions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "SGWzJ5N6bJFB"
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "\n",
       "try {\n",
       "require(['notebook/js/codecell'], function(codecell) {\n",
       "  codecell.CodeCell.options_default.highlight_modes[\n",
       "      'magic_text/x-csrc'] = {'reg':[/^%%microblaze/]};\n",
       "  Jupyter.notebook.events.one('kernel_ready.Kernel', function(){\n",
       "      Jupyter.notebook.get_cells().map(function(cell){\n",
       "          if (cell.cell_type == 'code'){ cell.auto_highlight(); } }) ;\n",
       "  });\n",
       "});\n",
       "} catch (e) {};\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/javascript": [
       "\n",
       "try {\n",
       "require(['notebook/js/codecell'], function(codecell) {\n",
       "  codecell.CodeCell.options_default.highlight_modes[\n",
       "      'magic_text/x-csrc'] = {'reg':[/^%%pybind11/]};\n",
       "  Jupyter.notebook.events.one('kernel_ready.Kernel', function(){\n",
       "      Jupyter.notebook.get_cells().map(function(cell){\n",
       "          if (cell.cell_type == 'code'){ cell.auto_highlight(); } }) ;\n",
       "  });\n",
       "});\n",
       "} catch (e) {};\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pynq.overlays.base import BaseOverlay\n",
    "from pynq.lib import MicroblazeLibrary\n",
    "base = BaseOverlay(\"base.bit\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "i0zwGg1abJFB"
   },
   "outputs": [],
   "source": [
    "liba = MicroblazeLibrary(base.PMODB, ['i2c'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "AAkHZw_QbJFB"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['__class__',\n",
       " '__delattr__',\n",
       " '__dict__',\n",
       " '__dir__',\n",
       " '__doc__',\n",
       " '__eq__',\n",
       " '__format__',\n",
       " '__ge__',\n",
       " '__getattribute__',\n",
       " '__gt__',\n",
       " '__hash__',\n",
       " '__init__',\n",
       " '__init_subclass__',\n",
       " '__le__',\n",
       " '__lt__',\n",
       " '__module__',\n",
       " '__ne__',\n",
       " '__new__',\n",
       " '__reduce__',\n",
       " '__reduce_ex__',\n",
       " '__repr__',\n",
       " '__setattr__',\n",
       " '__sizeof__',\n",
       " '__str__',\n",
       " '__subclasshook__',\n",
       " '__weakref__',\n",
       " '_build_constants',\n",
       " '_build_functions',\n",
       " '_mb',\n",
       " '_populate_typedefs',\n",
       " '_rpc_stream',\n",
       " 'active_functions',\n",
       " 'i2c_close',\n",
       " 'i2c_get_num_devices',\n",
       " 'i2c_open',\n",
       " 'i2c_open_device',\n",
       " 'i2c_read',\n",
       " 'i2c_write',\n",
       " 'release',\n",
       " 'reset',\n",
       " 'visitor']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dir(liba) # list the available commands for the liba object"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "2nXUx1L_bJFB"
   },
   "source": [
    "In the cell below, open a new i2c device. Check the resources for the i2c_open parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "G1739qZebJFB"
   },
   "outputs": [],
   "source": [
    "# Open a new I2C device\n",
    "device = liba.i2c_open(1,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "id": "Vnmp6VzDbJFC"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['__call__',\n",
       " '__class__',\n",
       " '__delattr__',\n",
       " '__dict__',\n",
       " '__dir__',\n",
       " '__doc__',\n",
       " '__eq__',\n",
       " '__format__',\n",
       " '__ge__',\n",
       " '__getattribute__',\n",
       " '__gt__',\n",
       " '__hash__',\n",
       " '__init__',\n",
       " '__init_subclass__',\n",
       " '__le__',\n",
       " '__lt__',\n",
       " '__module__',\n",
       " '__ne__',\n",
       " '__new__',\n",
       " '__reduce__',\n",
       " '__reduce_ex__',\n",
       " '__repr__',\n",
       " '__setattr__',\n",
       " '__sizeof__',\n",
       " '__str__',\n",
       " '__subclasshook__',\n",
       " '__weakref__',\n",
       " '_call_function',\n",
       " '_handle_stream',\n",
       " 'call',\n",
       " 'call_async',\n",
       " 'function',\n",
       " 'index',\n",
       " 'return_type',\n",
       " 'stream']"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dir(device) # list the commands for the device class"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "VuiNLUXfbJFC"
   },
   "source": [
    "Below we write a command to the I2C channel and then read from the I2C channel. Change the buf[0] value to select different channels. See the AD spec sheet Configuration Register. https://www.analog.com/media/en/technical-documentation/data-sheets/AD7991_7995_7999.pdf\n",
    "\n",
    "Changing the number of channels to read from will require a 2 byte read for each channel!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "NkTblJ1obJFC"
   },
   "outputs": [],
   "source": [
    "buf = bytearray(2)\n",
    "buf[0] = int('00000000', 2)\n",
    "device.write(0x28, buf, 1)\n",
    "device.read(0x28, buf, 2)\n",
    "print(format(int(((buf[0] << 8) | buf[1])), '#018b'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "e18BrrVSbJFC"
   },
   "source": [
    "Compare the binary output given by ((buf[0]<<8) | buf[1]) to the AD7991 spec sheet. You can select the data only using the following command"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "id": "s3wcNQTybJFC"
   },
   "outputs": [],
   "source": [
    "result_12bit = (((buf[0] & 0x0F) << 8) | buf[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "FPDa1IiSbJFD"
   },
   "source": [
    "# Using MicroBlaze"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "2JvyY5QmbJFD"
   },
   "outputs": [],
   "source": [
    "base = BaseOverlay(\"base.bit\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "id": "pLrRT0eobJFD"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre>Compile FAILED\n",
       "cell_magic: In function 'int read_adc()':\n",
       "cell_magic:9:15: error: 'i2c_device' was not declared in this scope; did you mean 'device'?\n",
       "</pre>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%microblaze base.PMODB\n",
    "\n",
    "#include \"i2c.h\"\n",
    "\n",
    "int read_adc(){\n",
    "    i2c device = i2c_open(3, 2);\n",
    "    unsigned char buf[2];\n",
    "    buf[0] = 0;\n",
    "    i2c_write(i2c_device, 0x28, buf, 1);\n",
    "    i2c_read(i2c_device, 0x28, buf, 2);\n",
    "    return ((buf[0] & 0x0F) << 8) | buf[1];\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "WtBxES6fbJFD"
   },
   "outputs": [],
   "source": [
    "read_adc()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "name": "iic_example.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
